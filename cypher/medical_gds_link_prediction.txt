///
////////// PARAMS
///
:param pipelinename => "mypipe";
:param graphname => "mygraph";
:param modelname => "mymodel";

///
////////// Drop existing objects
///
CALL gds.beta.pipeline.drop($pipelinename, false)
YIELD pipelineName, pipelineType;

CALL gds.graph.drop($graphname, false) YIELD graphName;

CALL gds.beta.model.drop($modelname, false)
YIELD modelInfo, loaded, shared, stored
RETURN modelInfo.modelName AS modelName, loaded, shared, stored;

///
////////// Create the pipeline
///

// Create Link Pipeline
CALL gds.beta.pipeline.linkPrediction.create($pipelinename);

// Add the embedding
CALL gds.beta.pipeline.linkPrediction.addNodeProperty($pipelinename, 'beta.hashgnn', {
  mutateProperty: 'embedding',
  iterations: 4,
  heterogeneous: True,
  embeddingDensity: 256,
  randomSeed: 42,
  neighborInfluence: 0.7,
  generateFeatures: {dimension: 1,  densityLevel: 1},
  contextNodeLabels: ['Patient','Diag','Drug','IHD']
});

// Add Feature
CALL gds.beta.pipeline.linkPrediction.addFeature($pipelinename, 'COSINE', {
  nodeProperties: ['embedding']
}) YIELD featureSteps;

//Data Split
CALL gds.beta.pipeline.linkPrediction.configureSplit($pipelinename, {
  testFraction: 0.2,
  trainFraction: 0.2,
  validationFolds: 3
});

//Add Model Candidates
CALL gds.beta.pipeline.linkPrediction.addLogisticRegression($pipelinename)
YIELD parameterSpace;

CALL gds.alpha.pipeline.linkPrediction.addMLP($pipelinename, {hiddenLayerSizes: [4, 2], penalty: 1, patience: 2})
YIELD parameterSpace;

//Create context graph
CALL gds.graph.project($graphname,
  ['Patient','Diag','Drug','IHD'],
  {
    IHD_RISK: {
      orientation: 'UNDIRECTED'
    },
    DIAGNOSED_WITH: {},
    PRESCRIBED: {}
  }
);

///
////////// Train
///
CALL gds.beta.pipeline.linkPrediction.train($graphname, {
  pipeline: $pipelinename,
  modelName: $modelname,
  metrics: ['AUCPR', 'OUT_OF_BAG_ERROR'],
  sourceNodeLabel: 'Patient',
  targetNodeLabel: 'IHD',
  targetRelationshipType: 'IHD_RISK',
  randomSeed: 12
}) YIELD modelInfo, modelSelectionStats
RETURN
  modelInfo.bestParameters AS winningModel,
  modelInfo.metrics.AUCPR.train.avg AS avgTrainScore,
  modelInfo.metrics.AUCPR.outerTrain AS outerTrainScore,
  modelInfo.metrics.AUCPR.test AS testScore,
  [cand IN modelSelectionStats.modelCandidates | cand.metrics.AUCPR.validation.avg] AS validationScores;

///
////////// Predict
///
CALL gds.beta.pipeline.linkPrediction.predict.stream($graphname, {
  modelName: $modelname,
  topN: 20,
  threshold: 0.1
})
 YIELD node1, node2, probability
RETURN COALESCE(gds.util.asNode(node1).PatientID,gds.util.asNode(node1).type) AS Node_1, COALESCE(gds.util.asNode(node2).Name, gds.util.asNode(node2).type) AS Node_2, probability
 ORDER BY probability DESC;